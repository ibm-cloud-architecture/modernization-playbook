{"componentChunkName":"component---src-pages-applications-refactor-images-performance-md","path":"/applications/refactor/images/Performance/","result":{"pageContext":{"frontmatter":{"description":"Applications / Refactor / Images / Performance","title":"Applications / Refactor / Images / Performance"},"relativePagePath":"/applications/refactor/images/Performance.md","titleType":"append","MdxNode":{"id":"c0e8ba82-65c9-5235-a17d-e5aa9f596b06","children":[],"parent":"f1c3f557-b00d-51d7-b176-12e52544d411","internal":{"content":"## Performance and Memory Tests\n\nPerformance comparisons are difficult. While the goal is to do fair comparisions, you don't want to compare horses with 1 PS cars either.\n\nMy interpretations of the results are:\n\n* OpenJ9 consumes less memory\n* Reactive technologies in Quarkus require less resources\n\nThe same endpoint is invoked 30000 times. Each invocation reads some data from a database. See below for details.\n\nNotes: \n* As with every performance test your mileage will vary!\n* Again, as with every performance test your mileage will vary! \n* This is not a generic comparison of the different options. Instead I've tested my simple use case of the e-commerce sample application.\n* I have not done any 'tuning' explicitly, but have used defaults. \n* Because of the many variations of runtimes, versions, JDKs, JVMs, etc. the results may not be respresentative yet. Reviews are going on.\n* Please ping me if you have feedback.\n\n\n| Test Case                     | Duration     | Memory - Start | Memory - End   |\n| ----------------------------- |:------------:| --------------:| --------------:|\n| 1) Quarkus/OpenJ9/Reactive    | 0:24         | 70             | 111            | \n| 2) Quarkus/Hotspot/Reactive   | 0:24         | 192            | 380            | \n| 3) OpenLiberty/OpenJ9/Synch   | 0:38         | 149            | 194            | \n| 4) Quarkus/OpenJ9/Synch       | 0:58         | 85             | 145            |\n| 5) Quarkus/Native/Reactive    | 0:27         | 11             | 378            |\n\n\n### Test Case 1: Quarkus - JVM Mode - OpenJ9 - Reactive\n\n* Quarkus (directory: [service-catalog-quarkus-reactive](https://github.com/nheidloff/application-modernization-javaee-quarkus/tree/master/service-catalog-quarkus-reactive))\n* Image: adoptopenjdk/openjdk11-openj9:ubi-minimal - [Dockerfile](../service-catalog-quarkus-reactive/Dockerfile)\n* Reactive Postgres ([example](https://github.com/nheidloff/application-modernization-javaee-quarkus/blob/master/service-catalog-quarkus-reactive/src/main/java/com/ibm/catalog/ProductResource.java#L46))\n* Postgres running in a container\n\n```\n$ git clone https://github.com/nheidloff/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh scripts-docker/stop-services.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run.sh\n```\n\n```\ncurl \"http://localhost/CustomerOrderServicesWeb/jaxrs/Product/?categoryId=2\"\n```\n\n```\ndocker exec storefront-catalog-reactive cat /sys/fs/cgroup/memory/memory.stat | grep rss\n```\n\nResults:\n* Duration of 30000 invocations: 0:24 mins\n* Memory before any invocations: 70 MB RSS\n* Memory after 30000 invocations: 111 MB RSS\n\n\n### Test Case 2: Quarkus - JVM Mode - Hotspot - Reactive\n\n* Quarkus (directory: [service-catalog-quarkus-reactive](https://github.com/nheidloff/application-modernization-javaee-quarkus/tree/master/service-catalog-quarkus-reactive))\n* Image: fabric8/java-alpine-openjdk11-jre - [Dockerfile](../service-catalog-quarkus-reactive/Dockerfile.hotspot)\n* Reactive Postgres ([example](https://github.com/nheidloff/application-modernization-javaee-quarkus/blob/master/service-catalog-quarkus-reactive/src/main/java/com/ibm/catalog/ProductResource.java#L46))\n* Postgres running in a container\n\n```\n$ git clone https://github.com/nheidloff/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh scripts-docker/stop-services.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-hotspot.sh\n```\n\n```\ncurl \"http://localhost/CustomerOrderServicesWeb/jaxrs/Product/?categoryId=2\"\n```\n\n```\ndocker exec storefront-catalog-reactive cat /sys/fs/cgroup/memory/memory.stat | grep rss\ndocker exec storefront-catalog-reactive ps -o rss,vsz 1 \n```\n\nResults:\n* Duration of 30000 invocations: 0:24 mins\n* Memory before any invocations: 192 MB RSS\n* Memory after 30000 invocations: 380 MB RSS\n\n\n### Test Case 3: Open Liberty - OpenJ9 - Synchronous \n\n* Open Liberty (directory: [monolith-open-liberty-cloud-native](https://github.com/nheidloff/application-modernization-javaee-quarkus/tree/master/monolith-open-liberty-cloud-native))\n* Image: open-liberty:kernel-java11-openj9-ubi - [Dockerfile](../monolith-open-liberty-cloud-native/Dockerfile.multistage)\n* JPA - synchronous ([example](https://github.com/nheidloff/application-modernization-javaee-quarkus/blob/master/monolith-open-liberty-cloud-native/src/main/java/org/pwte/example/service/ProductSearchServiceImpl.java#L30))\n* Db2 running in a container\n\n```\n$ git clone https://github.com/nheidloff/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh scripts-docker/stop-services.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-monolith-db2.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/run-database-postgres-catalog.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/run-kafka.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-catalog.sh\n```\n\n```\ncurl \"http://localhost:9088/CustomerOrderServicesWeb/jaxrs/Product/?categoryId=2\"\n```\n\n```\ndocker exec storefront-backend-open-native cat /sys/fs/cgroup/memory/memory.stat | grep rss\n```\n\nResults:\n* Duration of 30000 invocations:  0:38 mins\n* Memory before any invocations:   149 MB RSS\n* Memory after 30000 invocations:  194 MB RSS\n\n\n### Test Case 4: Quarkus - JVM Mode - OpenJ9 - Synchronous\n\n* Quarkus (directory: [service-catalog-quarkus-synch](https://github.com/nheidloff/application-modernization-javaee-quarkus/tree/master/service-catalog-quarkus-synch))\n* Image: adoptopenjdk/openjdk11-openj9:ubi-minimal - [Dockerfile](../service-catalog-quarkus-synch/Dockerfile)\n* Panache - synchronous ([example](https://github.com/nheidloff/application-modernization-javaee-quarkus/blob/master/service-catalog-quarkus-synch/src/main/java/com/ibm/catalog/CategoryResource.java#L29))\n* Postgres running in a container\n\n```\n$ git clone https://github.com/nheidloff/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh scripts-docker/stop-services.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-monolith-db2.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/run-database-postgres-catalog.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/run-kafka.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-catalog.sh\n```\n\n```\ncurl \"http://localhost/CustomerOrderServicesWeb/jaxrs/Product/?categoryId=2\"\n```\n\n```\ndocker exec storefront-catalog cat /sys/fs/cgroup/memory/memory.stat | grep rss\n```\n\nResults:\n* Duration of 30000 invocations:  1:01 mins\n* Memory before any invocations:  85 MB RSS\n* Memory after 30000 invocations: 145 MB RSS\n\n\n### Test Case 5: Quarkus - Native Mode - Reactive\n\n* Quarkus (directory: [service-catalog-quarkus-reactive](https://github.com/nheidloff/application-modernization-javaee-quarkus/tree/master/service-catalog-quarkus-reactive))\n* Image: registry.access.redhat.com/ubi8/ubi-minimal - [Dockerfile](../service-catalog-quarkus-reactive/src/main/docker/Dockerfile)\n* Reactive Postgres ([example](https://github.com/nheidloff/application-modernization-javaee-quarkus/blob/master/service-catalog-quarkus-reactive/src/main/java/com/ibm/catalog/ProductResource.java#L46))\n* Postgres running in a container\n\n```\n$ git clone https://github.com/nheidloff/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh scripts-docker/stop-services.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-monolith-db2.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/run-database-postgres-catalog.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/run-kafka.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-quarkus-services.sh\n```\n\n```\ncurl \"http://localhost/CustomerOrderServicesWeb/jaxrs/Product/?categoryId=2\"\n```\n\n```\ndocker exec storefront-catalog-reactive cat /sys/fs/cgroup/memory/memory.stat | grep rss\n```\n\nResults:\n* Duration of 30000 invocations:   0:26 mins\n* Memory before any invocations:   11 MB RSS\n* Memory after 30000 invocations:  378 MB RSS\n","type":"Mdx","contentDigest":"9c6539b6d39f584f393e8c67ca17384f","counter":475,"owner":"gatsby-plugin-mdx"},"frontmatter":{"description":"Applications / Refactor / Images / Performance","title":"Applications / Refactor / Images / Performance"},"exports":{},"rawBody":"## Performance and Memory Tests\n\nPerformance comparisons are difficult. While the goal is to do fair comparisions, you don't want to compare horses with 1 PS cars either.\n\nMy interpretations of the results are:\n\n* OpenJ9 consumes less memory\n* Reactive technologies in Quarkus require less resources\n\nThe same endpoint is invoked 30000 times. Each invocation reads some data from a database. See below for details.\n\nNotes: \n* As with every performance test your mileage will vary!\n* Again, as with every performance test your mileage will vary! \n* This is not a generic comparison of the different options. Instead I've tested my simple use case of the e-commerce sample application.\n* I have not done any 'tuning' explicitly, but have used defaults. \n* Because of the many variations of runtimes, versions, JDKs, JVMs, etc. the results may not be respresentative yet. Reviews are going on.\n* Please ping me if you have feedback.\n\n\n| Test Case                     | Duration     | Memory - Start | Memory - End   |\n| ----------------------------- |:------------:| --------------:| --------------:|\n| 1) Quarkus/OpenJ9/Reactive    | 0:24         | 70             | 111            | \n| 2) Quarkus/Hotspot/Reactive   | 0:24         | 192            | 380            | \n| 3) OpenLiberty/OpenJ9/Synch   | 0:38         | 149            | 194            | \n| 4) Quarkus/OpenJ9/Synch       | 0:58         | 85             | 145            |\n| 5) Quarkus/Native/Reactive    | 0:27         | 11             | 378            |\n\n\n### Test Case 1: Quarkus - JVM Mode - OpenJ9 - Reactive\n\n* Quarkus (directory: [service-catalog-quarkus-reactive](https://github.com/nheidloff/application-modernization-javaee-quarkus/tree/master/service-catalog-quarkus-reactive))\n* Image: adoptopenjdk/openjdk11-openj9:ubi-minimal - [Dockerfile](../service-catalog-quarkus-reactive/Dockerfile)\n* Reactive Postgres ([example](https://github.com/nheidloff/application-modernization-javaee-quarkus/blob/master/service-catalog-quarkus-reactive/src/main/java/com/ibm/catalog/ProductResource.java#L46))\n* Postgres running in a container\n\n```\n$ git clone https://github.com/nheidloff/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh scripts-docker/stop-services.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run.sh\n```\n\n```\ncurl \"http://localhost/CustomerOrderServicesWeb/jaxrs/Product/?categoryId=2\"\n```\n\n```\ndocker exec storefront-catalog-reactive cat /sys/fs/cgroup/memory/memory.stat | grep rss\n```\n\nResults:\n* Duration of 30000 invocations: 0:24 mins\n* Memory before any invocations: 70 MB RSS\n* Memory after 30000 invocations: 111 MB RSS\n\n\n### Test Case 2: Quarkus - JVM Mode - Hotspot - Reactive\n\n* Quarkus (directory: [service-catalog-quarkus-reactive](https://github.com/nheidloff/application-modernization-javaee-quarkus/tree/master/service-catalog-quarkus-reactive))\n* Image: fabric8/java-alpine-openjdk11-jre - [Dockerfile](../service-catalog-quarkus-reactive/Dockerfile.hotspot)\n* Reactive Postgres ([example](https://github.com/nheidloff/application-modernization-javaee-quarkus/blob/master/service-catalog-quarkus-reactive/src/main/java/com/ibm/catalog/ProductResource.java#L46))\n* Postgres running in a container\n\n```\n$ git clone https://github.com/nheidloff/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh scripts-docker/stop-services.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-hotspot.sh\n```\n\n```\ncurl \"http://localhost/CustomerOrderServicesWeb/jaxrs/Product/?categoryId=2\"\n```\n\n```\ndocker exec storefront-catalog-reactive cat /sys/fs/cgroup/memory/memory.stat | grep rss\ndocker exec storefront-catalog-reactive ps -o rss,vsz 1 \n```\n\nResults:\n* Duration of 30000 invocations: 0:24 mins\n* Memory before any invocations: 192 MB RSS\n* Memory after 30000 invocations: 380 MB RSS\n\n\n### Test Case 3: Open Liberty - OpenJ9 - Synchronous \n\n* Open Liberty (directory: [monolith-open-liberty-cloud-native](https://github.com/nheidloff/application-modernization-javaee-quarkus/tree/master/monolith-open-liberty-cloud-native))\n* Image: open-liberty:kernel-java11-openj9-ubi - [Dockerfile](../monolith-open-liberty-cloud-native/Dockerfile.multistage)\n* JPA - synchronous ([example](https://github.com/nheidloff/application-modernization-javaee-quarkus/blob/master/monolith-open-liberty-cloud-native/src/main/java/org/pwte/example/service/ProductSearchServiceImpl.java#L30))\n* Db2 running in a container\n\n```\n$ git clone https://github.com/nheidloff/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh scripts-docker/stop-services.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-monolith-db2.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/run-database-postgres-catalog.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/run-kafka.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-catalog.sh\n```\n\n```\ncurl \"http://localhost:9088/CustomerOrderServicesWeb/jaxrs/Product/?categoryId=2\"\n```\n\n```\ndocker exec storefront-backend-open-native cat /sys/fs/cgroup/memory/memory.stat | grep rss\n```\n\nResults:\n* Duration of 30000 invocations:  0:38 mins\n* Memory before any invocations:   149 MB RSS\n* Memory after 30000 invocations:  194 MB RSS\n\n\n### Test Case 4: Quarkus - JVM Mode - OpenJ9 - Synchronous\n\n* Quarkus (directory: [service-catalog-quarkus-synch](https://github.com/nheidloff/application-modernization-javaee-quarkus/tree/master/service-catalog-quarkus-synch))\n* Image: adoptopenjdk/openjdk11-openj9:ubi-minimal - [Dockerfile](../service-catalog-quarkus-synch/Dockerfile)\n* Panache - synchronous ([example](https://github.com/nheidloff/application-modernization-javaee-quarkus/blob/master/service-catalog-quarkus-synch/src/main/java/com/ibm/catalog/CategoryResource.java#L29))\n* Postgres running in a container\n\n```\n$ git clone https://github.com/nheidloff/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh scripts-docker/stop-services.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-monolith-db2.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/run-database-postgres-catalog.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/run-kafka.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-catalog.sh\n```\n\n```\ncurl \"http://localhost/CustomerOrderServicesWeb/jaxrs/Product/?categoryId=2\"\n```\n\n```\ndocker exec storefront-catalog cat /sys/fs/cgroup/memory/memory.stat | grep rss\n```\n\nResults:\n* Duration of 30000 invocations:  1:01 mins\n* Memory before any invocations:  85 MB RSS\n* Memory after 30000 invocations: 145 MB RSS\n\n\n### Test Case 5: Quarkus - Native Mode - Reactive\n\n* Quarkus (directory: [service-catalog-quarkus-reactive](https://github.com/nheidloff/application-modernization-javaee-quarkus/tree/master/service-catalog-quarkus-reactive))\n* Image: registry.access.redhat.com/ubi8/ubi-minimal - [Dockerfile](../service-catalog-quarkus-reactive/src/main/docker/Dockerfile)\n* Reactive Postgres ([example](https://github.com/nheidloff/application-modernization-javaee-quarkus/blob/master/service-catalog-quarkus-reactive/src/main/java/com/ibm/catalog/ProductResource.java#L46))\n* Postgres running in a container\n\n```\n$ git clone https://github.com/nheidloff/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh scripts-docker/stop-services.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-monolith-db2.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/run-database-postgres-catalog.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/run-kafka.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-quarkus-services.sh\n```\n\n```\ncurl \"http://localhost/CustomerOrderServicesWeb/jaxrs/Product/?categoryId=2\"\n```\n\n```\ndocker exec storefront-catalog-reactive cat /sys/fs/cgroup/memory/memory.stat | grep rss\n```\n\nResults:\n* Duration of 30000 invocations:   0:26 mins\n* Memory before any invocations:   11 MB RSS\n* Memory after 30000 invocations:  378 MB RSS\n","fileAbsolutePath":"/home/runner/work/modernization-playbook/modernization-playbook/src/pages/applications/refactor/images/Performance.md"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}