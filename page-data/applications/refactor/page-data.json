{"componentChunkName":"component---src-pages-applications-refactor-index-mdx","path":"/applications/refactor/","result":{"pageContext":{"frontmatter":{"title":"Refactoring Java EE Applications","description":"A example of refactoring a Java EE Application to Micro Services"},"relativePagePath":"/applications/refactor/index.mdx","titleType":"append","MdxNode":{"id":"fb97791e-3187-551f-99b7-51b5cd587298","children":[],"parent":"f9419593-2f93-5af5-b618-6ccc0ac72e13","internal":{"content":"---\ntitle: Refactoring Java EE Applications\ndescription: A example of refactoring a Java EE Application to Micro Services\n---\n\nexport const Title = () => (\n  <span>\nRefactoring Java EE Applications<br/> <h2>A phased approach to refactoring a Monolith in to Micro Services</h2>\n  </span>\n);\n\n<PageDescription>\n\nA phased approach to refactoring a Monolith in to Micro Services\n\n</PageDescription>\n\n<AnchorLinks small>\n  <AnchorLink>Introduction</AnchorLink>\n  <AnchorLink>Application Overview </AnchorLink>\n  <AnchorLink>How the Application was Modernized</AnchorLink>\n  <AnchorLink>Move the monolith to WebSphere Liberty with minimal changes</AnchorLink>\n  <AnchorLink>Separate the frontend from the monolith</AnchorLink>\n  <AnchorLink>Move the backend monolith to OpenLiberty</AnchorLink>\n  <AnchorLink>Refactor the Catalog service to Quarkus</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n\n## Introduction\nComing soon.... \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/lw95LLqa37g\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Application Overview\nThe **Customer Order Services** application is a simple store-front shopping application, built during the early days of the Web 2.0 movement. Users interact directly with a browser-based interface and manage their cart to submit orders.  This application is built using the traditional [3-Tier Architecture](http://www.tonymarston.net/php-mysql/3-tier-architecture.html) model, with an HTTP server, an application server, and a supporting database.\n\n![Phase 0 Application Architecture](https://github.com/ibm-cloud-architecture/refarch-jee/raw/master/static/imgs/apparch-pc-phase0-customerorderservices.png)\n\nThere are several components of the overall application architecture:\n- Starting with the database, the application leverages two SQL-based databases running on [IBM DB2](https://www.ibm.com/analytics/us/en/technology/db2/).\n\n- The application exposes its data model through an [Enterprise JavaBean](https://en.wikipedia.org/wiki/Enterprise_JavaBeans) layer, named **CustomerOrderServices**.  This components leverages the [Java Persistence API](https://en.wikibooks.org/wiki/Java_Persistence/What_is_JPA%3F) to exposed the backend data model to calling services with minimal coding effort.\n  - This build of the application uses JavaEE6 features for EJBs and JPA.\n- The next tier of the application, named **CustomerOrderServicesWeb**, exposes the necessary business APIs via REST-based web services.  This component leverages the [JAX-RS](https://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services) libraries for creating Java-based REST services with minimal coding effort.\n  - This build of the application is using **JAX-RS 1.1** version of the respective capability.\n- The application's user interface is exposed through the **CustomerOrderServicesWeb** component as well, in the form of a [Dojo Toolkit](#tbd)-based JavaScript application.  Delivering the user interface and business APIs in the same component is one major inhibitor our migration strategy will help to alleviate in the long-term.\n- Finally, there is an additional integration testing component, named **CustomerOrderServicesTest** that is built to quickly validate an application's build and deployment to a given application server.  This test component contains both **JPA** and **JAX-RS**-based tests.\n\n## How the Application was Modernized\nComing soon...\n\n  ![Step 1](images/step1.png)\n\n### Move the monolith to WebSphere Liberty with minimal changes\n\n  ![Step 3](images/step3.png)\n\n### Separate the frontend from the monolith\n\n  ![Step 4](images/step4.png)\n\n### Move the backend monolith to OpenLiberty\n\n  ![Step 5](images/step5.png)\n\n### Refactor the Catalog service to Quarkus\n\n  ![Step 6](images/step6.png)\n\n## Summary\nThis application has been refactored in a series of steps from the original [WebSphere ND v8.5.5 version](https://github.com/ibm-cloud-architecture/cloudpak-for-applications/tree/was855) to run as Micro Services on Red Hat OpenShift.\n","type":"Mdx","contentDigest":"f99f6fed7e219fb98f9b02a430658d70","counter":448,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Refactoring Java EE Applications","description":"A example of refactoring a Java EE Application to Micro Services"},"exports":{},"rawBody":"---\ntitle: Refactoring Java EE Applications\ndescription: A example of refactoring a Java EE Application to Micro Services\n---\n\nexport const Title = () => (\n  <span>\nRefactoring Java EE Applications<br/> <h2>A phased approach to refactoring a Monolith in to Micro Services</h2>\n  </span>\n);\n\n<PageDescription>\n\nA phased approach to refactoring a Monolith in to Micro Services\n\n</PageDescription>\n\n<AnchorLinks small>\n  <AnchorLink>Introduction</AnchorLink>\n  <AnchorLink>Application Overview </AnchorLink>\n  <AnchorLink>How the Application was Modernized</AnchorLink>\n  <AnchorLink>Move the monolith to WebSphere Liberty with minimal changes</AnchorLink>\n  <AnchorLink>Separate the frontend from the monolith</AnchorLink>\n  <AnchorLink>Move the backend monolith to OpenLiberty</AnchorLink>\n  <AnchorLink>Refactor the Catalog service to Quarkus</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n\n## Introduction\nComing soon.... \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/lw95LLqa37g\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Application Overview\nThe **Customer Order Services** application is a simple store-front shopping application, built during the early days of the Web 2.0 movement. Users interact directly with a browser-based interface and manage their cart to submit orders.  This application is built using the traditional [3-Tier Architecture](http://www.tonymarston.net/php-mysql/3-tier-architecture.html) model, with an HTTP server, an application server, and a supporting database.\n\n![Phase 0 Application Architecture](https://github.com/ibm-cloud-architecture/refarch-jee/raw/master/static/imgs/apparch-pc-phase0-customerorderservices.png)\n\nThere are several components of the overall application architecture:\n- Starting with the database, the application leverages two SQL-based databases running on [IBM DB2](https://www.ibm.com/analytics/us/en/technology/db2/).\n\n- The application exposes its data model through an [Enterprise JavaBean](https://en.wikipedia.org/wiki/Enterprise_JavaBeans) layer, named **CustomerOrderServices**.  This components leverages the [Java Persistence API](https://en.wikibooks.org/wiki/Java_Persistence/What_is_JPA%3F) to exposed the backend data model to calling services with minimal coding effort.\n  - This build of the application uses JavaEE6 features for EJBs and JPA.\n- The next tier of the application, named **CustomerOrderServicesWeb**, exposes the necessary business APIs via REST-based web services.  This component leverages the [JAX-RS](https://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services) libraries for creating Java-based REST services with minimal coding effort.\n  - This build of the application is using **JAX-RS 1.1** version of the respective capability.\n- The application's user interface is exposed through the **CustomerOrderServicesWeb** component as well, in the form of a [Dojo Toolkit](#tbd)-based JavaScript application.  Delivering the user interface and business APIs in the same component is one major inhibitor our migration strategy will help to alleviate in the long-term.\n- Finally, there is an additional integration testing component, named **CustomerOrderServicesTest** that is built to quickly validate an application's build and deployment to a given application server.  This test component contains both **JPA** and **JAX-RS**-based tests.\n\n## How the Application was Modernized\nComing soon...\n\n  ![Step 1](images/step1.png)\n\n### Move the monolith to WebSphere Liberty with minimal changes\n\n  ![Step 3](images/step3.png)\n\n### Separate the frontend from the monolith\n\n  ![Step 4](images/step4.png)\n\n### Move the backend monolith to OpenLiberty\n\n  ![Step 5](images/step5.png)\n\n### Refactor the Catalog service to Quarkus\n\n  ![Step 6](images/step6.png)\n\n## Summary\nThis application has been refactored in a series of steps from the original [WebSphere ND v8.5.5 version](https://github.com/ibm-cloud-architecture/cloudpak-for-applications/tree/was855) to run as Micro Services on Red Hat OpenShift.\n","fileAbsolutePath":"/home/runner/work/modernization-playbook/modernization-playbook/src/pages/applications/refactor/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}