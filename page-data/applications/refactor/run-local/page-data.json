{"componentChunkName":"component---src-pages-applications-refactor-run-local-mdx","path":"/applications/refactor/run-local/","result":{"pageContext":{"frontmatter":{"title":"Refactoring Java EE Applications","description":"A example of refactoring a Java EE Application to Micro Services"},"relativePagePath":"/applications/refactor/run-local.mdx","titleType":"append","MdxNode":{"id":"dcb19896-da9f-585f-8010-1661e9a8c0bb","children":[],"parent":"646796d1-29cb-5b3c-864f-b10695d492c7","internal":{"content":"---\ntitle: Refactoring Java EE Applications\ndescription: A example of refactoring a Java EE Application to Micro Services\n---\n\nexport const Title = () => (\n  <span>\nRefactoring Java EE Applications<br/> <h2>Run the solution locally using Docker Compose</h2>\n  </span>\n);\n\n<PageDescription>\n\nRun the solution locally using Docker Compose\n\n</PageDescription>\n\n<AnchorLinks small>\n  <AnchorLink>Introduction</AnchorLink>\n  <AnchorLink>Run the final solution</AnchorLink>\n  <AnchorLink>Run the WebSphere Liberty monolith solution</AnchorLink>\n  <AnchorLink>Run the separated frontend solution</AnchorLink>\n  <AnchorLink>Run the backend monolith on OpenLiberty solution</AnchorLink>\n  <AnchorLink>Run the refactored Catalog service on Quarkus solution</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n\n## Introduction\nThis section covers how to run the solution at various stages throughout the modernization journey. Docker Compose is used to provide an environment to run the containers that make up the application.\n\nThis application requires Docker to be configured with:\n  - Docker + Docker Compose\n  - 14 GB RAM\n  - 10 CPUs\n  - 80 GB Disk Space (for images)\n\n## Run the final solution\nThe final solution for the refactoring effort has the components shown below\n\n  ![Step 7](images/step7.png)\n\nUse the following commands to clone the repository and start the containers for the application.\n\n```\n$ git clone https://github.com/IBM/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run.sh\n```\n\n**Note:** it may take 10 or more minutes for all of the containers to build and start\n\nThe 'build-and-run.sh' script will launch the following containers.\n\n![Containers](images/Containers.png)\n\nOnce everything has been started, you can open the web applications:\n\n- Legacy Dojo frontend: http://localhost/CustomerOrderServicesWeb\n\n- Modern micro-frontend based application: http://localhost:8080\n\nAdd the item \"Return of the Jedi\" to the shopping cart via drag and drop.\n\n![Containers](images/storefront-add-item.png)\n\nUpdate the price of this item:\n\n```\n$ curl -X PUT \"http://localhost/CustomerOrderServicesWeb/jaxrs/Product/1\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -d \"{\\\"id\\\":1, \\\"price\\\":50}\"\n```\n\nOpen the \"Order History\" tab to see the updated price. The new price has been updated in the catalog service and the remaining monolith.\n\n![Containers](images/storefront-new-price.png)\n\n### Run the WebSphere Liberty monolith solution\nIf you are interested in the initial WebSphere Liberty solution with a single monolith deployed, then you can run the commands shown below:\n\n  ![Step 3](images/step3.png)\n\n```\n$ git clone https://github.com/nheidloff/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-monolith-db2.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-monolith-app.sh\n```\n\n- Open [http://localhost/CustomerOrderServicesWeb](http://localhost/CustomerOrderServicesWeb) in order to test the application and see the frontend\n\n### Run the separated frontend solution\nIf you are interested in the solution that took the single monolith and split out the frontend component from the EJB code, then you can run the commands shown below:\n\n  ![Step 4](images/step4.png)\n\n```\n$ git clone https://github.com/IBM/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-monolith-db2.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-splitted-frontend.sh\n```\n\n- Open [http://localhost/CustomerOrderServicesWeb](http://localhost/CustomerOrderServicesWeb) in order to test the application and see the frontend\n\n### Run the backend monolith on OpenLiberty solution\nIf you are interested in the solution that took the backend monolith and modernized the code to run on OpenLiberty and removed the EJBs, then you can run the commands shown below:\n\n  ![Step 5](images/step5.png)\n\n```\n$ git clone https://github.com/IBM/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-monolith-db2.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-splitted-frontend-open.sh\n```\n\n- Open [http://localhost/CustomerOrderServicesWeb](http://localhost/CustomerOrderServicesWeb) in order to test the application and see the frontend\n\n### Run the refactored Catalog service on Quarkus solution\nIf you are interested in the solution that took strangled the Catalog service from the monolith and deployed it using Quarkus, then you can run the commands shown below:\n\n  ![Step 6](images/step6.png)\n\n```\n$ git clone https://github.com/IBM/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-monolith-db2.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/run-database-postgres-catalog.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/run-kafka.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-catalog.sh\n```\n\n- Open [http://localhost/CustomerOrderServicesWeb](http://localhost/CustomerOrderServicesWeb) in order to test the application and see the frontend\n\n## Summary\nThis application has been refactored in a series of steps from the original [WebSphere ND v8.5.5 version](https://github.com/ibm-cloud-architecture/cloudpak-for-applications/tree/was855) to run as Micro Services on Red Hat OpenShift.\n","type":"Mdx","contentDigest":"fcb35276ed3784734266a5bb2889c417","counter":459,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Refactoring Java EE Applications","description":"A example of refactoring a Java EE Application to Micro Services"},"exports":{},"rawBody":"---\ntitle: Refactoring Java EE Applications\ndescription: A example of refactoring a Java EE Application to Micro Services\n---\n\nexport const Title = () => (\n  <span>\nRefactoring Java EE Applications<br/> <h2>Run the solution locally using Docker Compose</h2>\n  </span>\n);\n\n<PageDescription>\n\nRun the solution locally using Docker Compose\n\n</PageDescription>\n\n<AnchorLinks small>\n  <AnchorLink>Introduction</AnchorLink>\n  <AnchorLink>Run the final solution</AnchorLink>\n  <AnchorLink>Run the WebSphere Liberty monolith solution</AnchorLink>\n  <AnchorLink>Run the separated frontend solution</AnchorLink>\n  <AnchorLink>Run the backend monolith on OpenLiberty solution</AnchorLink>\n  <AnchorLink>Run the refactored Catalog service on Quarkus solution</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n\n## Introduction\nThis section covers how to run the solution at various stages throughout the modernization journey. Docker Compose is used to provide an environment to run the containers that make up the application.\n\nThis application requires Docker to be configured with:\n  - Docker + Docker Compose\n  - 14 GB RAM\n  - 10 CPUs\n  - 80 GB Disk Space (for images)\n\n## Run the final solution\nThe final solution for the refactoring effort has the components shown below\n\n  ![Step 7](images/step7.png)\n\nUse the following commands to clone the repository and start the containers for the application.\n\n```\n$ git clone https://github.com/IBM/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run.sh\n```\n\n**Note:** it may take 10 or more minutes for all of the containers to build and start\n\nThe 'build-and-run.sh' script will launch the following containers.\n\n![Containers](images/Containers.png)\n\nOnce everything has been started, you can open the web applications:\n\n- Legacy Dojo frontend: http://localhost/CustomerOrderServicesWeb\n\n- Modern micro-frontend based application: http://localhost:8080\n\nAdd the item \"Return of the Jedi\" to the shopping cart via drag and drop.\n\n![Containers](images/storefront-add-item.png)\n\nUpdate the price of this item:\n\n```\n$ curl -X PUT \"http://localhost/CustomerOrderServicesWeb/jaxrs/Product/1\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -d \"{\\\"id\\\":1, \\\"price\\\":50}\"\n```\n\nOpen the \"Order History\" tab to see the updated price. The new price has been updated in the catalog service and the remaining monolith.\n\n![Containers](images/storefront-new-price.png)\n\n### Run the WebSphere Liberty monolith solution\nIf you are interested in the initial WebSphere Liberty solution with a single monolith deployed, then you can run the commands shown below:\n\n  ![Step 3](images/step3.png)\n\n```\n$ git clone https://github.com/nheidloff/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-monolith-db2.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-monolith-app.sh\n```\n\n- Open [http://localhost/CustomerOrderServicesWeb](http://localhost/CustomerOrderServicesWeb) in order to test the application and see the frontend\n\n### Run the separated frontend solution\nIf you are interested in the solution that took the single monolith and split out the frontend component from the EJB code, then you can run the commands shown below:\n\n  ![Step 4](images/step4.png)\n\n```\n$ git clone https://github.com/IBM/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-monolith-db2.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-splitted-frontend.sh\n```\n\n- Open [http://localhost/CustomerOrderServicesWeb](http://localhost/CustomerOrderServicesWeb) in order to test the application and see the frontend\n\n### Run the backend monolith on OpenLiberty solution\nIf you are interested in the solution that took the backend monolith and modernized the code to run on OpenLiberty and removed the EJBs, then you can run the commands shown below:\n\n  ![Step 5](images/step5.png)\n\n```\n$ git clone https://github.com/IBM/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-monolith-db2.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-splitted-frontend-open.sh\n```\n\n- Open [http://localhost/CustomerOrderServicesWeb](http://localhost/CustomerOrderServicesWeb) in order to test the application and see the frontend\n\n### Run the refactored Catalog service on Quarkus solution\nIf you are interested in the solution that took strangled the Catalog service from the monolith and deployed it using Quarkus, then you can run the commands shown below:\n\n  ![Step 6](images/step6.png)\n\n```\n$ git clone https://github.com/IBM/application-modernization-javaee-quarkus.git && cd application-modernization-javaee-quarkus\n$ ROOT_FOLDER=$(pwd)\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-monolith-db2.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/run-database-postgres-catalog.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/run-kafka.sh\n$ sh ${ROOT_FOLDER}/scripts-docker/build-and-run-catalog.sh\n```\n\n- Open [http://localhost/CustomerOrderServicesWeb](http://localhost/CustomerOrderServicesWeb) in order to test the application and see the frontend\n\n## Summary\nThis application has been refactored in a series of steps from the original [WebSphere ND v8.5.5 version](https://github.com/ibm-cloud-architecture/cloudpak-for-applications/tree/was855) to run as Micro Services on Red Hat OpenShift.\n","fileAbsolutePath":"/home/runner/work/modernization-playbook/modernization-playbook/src/pages/applications/refactor/run-local.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}