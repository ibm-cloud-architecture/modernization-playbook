{"componentChunkName":"component---src-pages-applications-was-90-t-was-deploy-mdx","path":"/applications/was90/tWAS-deploy/","result":{"pageContext":{"frontmatter":{"title":"Modernizing operations using traditional WAS - Deploy","description":"This section covers how to containerize an existing application running on traditional WebSphere Application Server."},"relativePagePath":"/applications/was90/tWAS-deploy.mdx","titleType":"append","MdxNode":{"id":"66aee369-11e5-5cf9-bb60-0e3deefb3e56","children":[],"parent":"50c652f2-447d-5d86-af40-abfc88f84ddb","internal":{"content":"---\ntitle:  Modernizing operations using traditional WAS - Deploy\ndescription: This section covers how to containerize an existing application running on traditional WebSphere Application Server. \n---\n\nexport const Title = () => (\n  <span>\nModernizing operations using traditional WAS <br/> <h2>Deploy to OpenShift</h2>\n  </span>\n);\n\n<PageDescription>\n\nThis section covers how to deploy a containerized traditional WebSphere Application Server application to run on Red Hat OpenShift Container Platform using OpenShift Pipelines.\n\n</PageDescription>\n\n\nThe diagram below shows the flow of the pipeline which starts when the developer checks their code in to Git and ends with the application being deployed in a build namespace.\nThe diagram below shows the following flow:\n\n- 1) A developer commits code to the `application repository`\n\n- 2) A webhook starts a `tekton pipeline` running in the `build` project\n\n- 3) A `tekton task` clones the application source code (4) from the application repository, uses `Maven` to compile and test the application before using `buildah` to create a `image` which is pushed to the image registry (5)\n\n- 6) A `tekton task` deploys the `application` to the local namespace using the image from the `image registry` (7)\n\n  ![Pipeline](../liberty/images/tekton-flow.jpg)\n\n## Deploy the Application\nThe following steps will deploy the modernized Customer Order Services application in a Traditional WAS container to a Red Hat OpenShift cluster.\n\n### Prerequisites\nYou will need the following:\n\n- [Git CLI](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\n- Red Hat OpenShift Container Platfrom 4.3 with Cluster Admin permissions\n- [oc CLI](https://docs.openshift.com/container-platform/3.11/cli_reference/get_started_cli.html)\n- DB2 Database\n- [Red Hat OpenShift Pipelines](OpenShiftPipelinesInstall.md)\n- [Tekton CLI](https://github.com/tektoncd/cli)\n\n### Getting the project repository\nYou can clone the repository from its main GitHub repository page and checkout the appropriate branch for this version of the application.\n\n```\ngit clone https://github.com/ibm-cloud-architecture/appmod-twas-tekton.git\ncd appmod-twas-tekton\n```\n\n### Create application database infrastructure\nAs said in the prerequisites section above, the Customer Order Services application uses uses DB2 as its database. Follow these steps to create the appropriate database, tables and data the application needs to:\n\n- Copy the createOrderDB.sql and initialDataSet.sql files you can find in the Common directory of this repository over to the db2 host machine (or git clone the repository) in order to execute them later.\n\n- ssh into the db2 host\n\n- Change to the db2 instance user: `su {database_instance_name}``\n\n- Start db2: `db2start`\n\n- Create the ORDERDB database: `db2 create database ORDERDB`\n\n- Connect to the ORDERDB database: `db2 connect to ORDERDB`\n\n- Execute the createOrderDB.sql script you copied over in step 1 in order to create the appropriate tables, relationships, primary keys, etc: `db2 -tf createOrderDB.sql`\n\n- Execute the initialDataSet.sql script you copied over in step 1 to populate the ORDERDB database with the needed initial data set: `db2 -tf initialDataSet.sql`\n\nIf you want to re-run the scripts, please make sure you drop the databases and create them again.\n\n### Create the build project\nCreate the project that will be used for the Tekton pipeline and the initial deployment of the application.\n\nIssue the command shown below to create the project:\n```\noc new-project cos-twas-tekton\n```\n\n### Import the Tekton resources\nImport the Tekton `Tasks`, `Pipeline` and `PipelineResources` in to the project using the commands shown below:\n\n```\ncd tekton/tekton-only\noc apply -f gse-apply-manifests-pvc-task.yaml\noc apply -f gse-buildah-pvc-task.yaml\noc apply -f gse-build-deploy-pvc-pipeline.yaml\noc apply -f gse-build-pipeline-resources.yaml\n```\n\n### Run the pipeline\nThe recommended way to trigger the pipeline would be via a webhook (**link**) but for simplicity the command line can be used. Issue the command below to trigger the pipeline:\n\n```\ntkn pipeline start  gse-build-deploy-pvc-pipeline -n cos-twas-tekton\n```\n\nWhen prompted, accept the default `git-source` value as shown below:\n\n  ![Pipeline](../liberty/images/tekton-only/start-1.jpg)\n\nWhen prompted, accept the default `docker-image` value as shown below:\n\n  ![Pipeline1](../liberty/images/tekton-only/start-2.jpg)\n\n### View the pipeline logs\n- In the OpenShift Container Platform UI, change to the **Developer** view, select the `cos-twas-tekton` project and then select **Pipelines**. Click on the **Last Run**\n\n  ![Pipeline](../liberty/images/tekton-only/run-1.jpg)\n\n- Select **Logs**\n\n  ![Pipeline Logs](../liberty/images/tekton-only/run-2.jpg)\n\n- The pipeline will execute and the logs will be displayed\n\n  ![Pipeline Logs](../liberty/images/tekton-only/run-3.jpg)\n\n- Once both the `gse-build` and `gse-apply-manifests` steps are complete, the pipeline is finished.\n\n### Validate the application\nNow that the pipeline is complete, validate the Customer Order Services application is deployed and running in `cos-twas-tekton` project\n\n- In the OpenShift Console, navigate to **Topology** view and click on the `cos-twas` Deployment to view deployment details, including `Pods` `Services` and `Routes`\n\n#### Topology\n  ![Deployment](images/tekton-only/validate-1.png)\n\n- From this view you can also view the **route** for the application. Note that the URL is < application_name >-< project_name >.< ocp cluster url >. In this case the project name is `cos-liberty-tekton`\n\n  ![Route](images/tekton-only/route.png)\n\n- Add `/CustomerOrderServicesWeb` to the end of the URL in the browser to access the application\n\n  ![Dev Running](images/tekton-only/dev-running.png)\n\n- Log in to the application with `username: rbarcia` and `password: bl0wfish`\n\n## Review and Next Steps\nIn this section you configured a CI/CD pipeline for the CustomerOrderServices application that builds a single immutable image for the latest version of the application and then deploys it to a dev environment.  \n","type":"Mdx","contentDigest":"0798654237373658b95e1b4cb2f08d99","counter":472,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Modernizing operations using traditional WAS - Deploy","description":"This section covers how to containerize an existing application running on traditional WebSphere Application Server."},"exports":{},"rawBody":"---\ntitle:  Modernizing operations using traditional WAS - Deploy\ndescription: This section covers how to containerize an existing application running on traditional WebSphere Application Server. \n---\n\nexport const Title = () => (\n  <span>\nModernizing operations using traditional WAS <br/> <h2>Deploy to OpenShift</h2>\n  </span>\n);\n\n<PageDescription>\n\nThis section covers how to deploy a containerized traditional WebSphere Application Server application to run on Red Hat OpenShift Container Platform using OpenShift Pipelines.\n\n</PageDescription>\n\n\nThe diagram below shows the flow of the pipeline which starts when the developer checks their code in to Git and ends with the application being deployed in a build namespace.\nThe diagram below shows the following flow:\n\n- 1) A developer commits code to the `application repository`\n\n- 2) A webhook starts a `tekton pipeline` running in the `build` project\n\n- 3) A `tekton task` clones the application source code (4) from the application repository, uses `Maven` to compile and test the application before using `buildah` to create a `image` which is pushed to the image registry (5)\n\n- 6) A `tekton task` deploys the `application` to the local namespace using the image from the `image registry` (7)\n\n  ![Pipeline](../liberty/images/tekton-flow.jpg)\n\n## Deploy the Application\nThe following steps will deploy the modernized Customer Order Services application in a Traditional WAS container to a Red Hat OpenShift cluster.\n\n### Prerequisites\nYou will need the following:\n\n- [Git CLI](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\n- Red Hat OpenShift Container Platfrom 4.3 with Cluster Admin permissions\n- [oc CLI](https://docs.openshift.com/container-platform/3.11/cli_reference/get_started_cli.html)\n- DB2 Database\n- [Red Hat OpenShift Pipelines](OpenShiftPipelinesInstall.md)\n- [Tekton CLI](https://github.com/tektoncd/cli)\n\n### Getting the project repository\nYou can clone the repository from its main GitHub repository page and checkout the appropriate branch for this version of the application.\n\n```\ngit clone https://github.com/ibm-cloud-architecture/appmod-twas-tekton.git\ncd appmod-twas-tekton\n```\n\n### Create application database infrastructure\nAs said in the prerequisites section above, the Customer Order Services application uses uses DB2 as its database. Follow these steps to create the appropriate database, tables and data the application needs to:\n\n- Copy the createOrderDB.sql and initialDataSet.sql files you can find in the Common directory of this repository over to the db2 host machine (or git clone the repository) in order to execute them later.\n\n- ssh into the db2 host\n\n- Change to the db2 instance user: `su {database_instance_name}``\n\n- Start db2: `db2start`\n\n- Create the ORDERDB database: `db2 create database ORDERDB`\n\n- Connect to the ORDERDB database: `db2 connect to ORDERDB`\n\n- Execute the createOrderDB.sql script you copied over in step 1 in order to create the appropriate tables, relationships, primary keys, etc: `db2 -tf createOrderDB.sql`\n\n- Execute the initialDataSet.sql script you copied over in step 1 to populate the ORDERDB database with the needed initial data set: `db2 -tf initialDataSet.sql`\n\nIf you want to re-run the scripts, please make sure you drop the databases and create them again.\n\n### Create the build project\nCreate the project that will be used for the Tekton pipeline and the initial deployment of the application.\n\nIssue the command shown below to create the project:\n```\noc new-project cos-twas-tekton\n```\n\n### Import the Tekton resources\nImport the Tekton `Tasks`, `Pipeline` and `PipelineResources` in to the project using the commands shown below:\n\n```\ncd tekton/tekton-only\noc apply -f gse-apply-manifests-pvc-task.yaml\noc apply -f gse-buildah-pvc-task.yaml\noc apply -f gse-build-deploy-pvc-pipeline.yaml\noc apply -f gse-build-pipeline-resources.yaml\n```\n\n### Run the pipeline\nThe recommended way to trigger the pipeline would be via a webhook (**link**) but for simplicity the command line can be used. Issue the command below to trigger the pipeline:\n\n```\ntkn pipeline start  gse-build-deploy-pvc-pipeline -n cos-twas-tekton\n```\n\nWhen prompted, accept the default `git-source` value as shown below:\n\n  ![Pipeline](../liberty/images/tekton-only/start-1.jpg)\n\nWhen prompted, accept the default `docker-image` value as shown below:\n\n  ![Pipeline1](../liberty/images/tekton-only/start-2.jpg)\n\n### View the pipeline logs\n- In the OpenShift Container Platform UI, change to the **Developer** view, select the `cos-twas-tekton` project and then select **Pipelines**. Click on the **Last Run**\n\n  ![Pipeline](../liberty/images/tekton-only/run-1.jpg)\n\n- Select **Logs**\n\n  ![Pipeline Logs](../liberty/images/tekton-only/run-2.jpg)\n\n- The pipeline will execute and the logs will be displayed\n\n  ![Pipeline Logs](../liberty/images/tekton-only/run-3.jpg)\n\n- Once both the `gse-build` and `gse-apply-manifests` steps are complete, the pipeline is finished.\n\n### Validate the application\nNow that the pipeline is complete, validate the Customer Order Services application is deployed and running in `cos-twas-tekton` project\n\n- In the OpenShift Console, navigate to **Topology** view and click on the `cos-twas` Deployment to view deployment details, including `Pods` `Services` and `Routes`\n\n#### Topology\n  ![Deployment](images/tekton-only/validate-1.png)\n\n- From this view you can also view the **route** for the application. Note that the URL is < application_name >-< project_name >.< ocp cluster url >. In this case the project name is `cos-liberty-tekton`\n\n  ![Route](images/tekton-only/route.png)\n\n- Add `/CustomerOrderServicesWeb` to the end of the URL in the browser to access the application\n\n  ![Dev Running](images/tekton-only/dev-running.png)\n\n- Log in to the application with `username: rbarcia` and `password: bl0wfish`\n\n## Review and Next Steps\nIn this section you configured a CI/CD pipeline for the CustomerOrderServices application that builds a single immutable image for the latest version of the application and then deploys it to a dev environment.  \n","fileAbsolutePath":"/home/runner/work/modernization-playbook/modernization-playbook/src/pages/applications/was90/tWAS-deploy.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}